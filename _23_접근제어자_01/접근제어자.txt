2024-09-30 접근제어자 - 멤버변수와 메서드의 접근권한을 설정(접근할 수 있는 범위, 권한을 설정)
			- 자료를 은닉화하기 위해서 

정의 → 맴버변수, 메서드의 접근권한 설정
종류 → default
	→ public 
	→ private
사용 예: DTO Class
	  	class
맴버변수 :	private
		getter, setter

종류 >> 

default : Package내에서 접근 가능
	→ default는 생략이 가능하다
public : 어디서든 접근 가능(전체)
private : Class내에서 접근 가능 → 클래스 내의 메서드나 변수를 은닉화 하는 것이 목적일 때 사용한다.
protected
Generate Getters and Setters

Shop(Project)
    l- bin(binary-2진수)  : 확장자가 .class
    l- src(source)  : 확장자가 .java
		실제 작성하는 코드가 존재
	l- a(package) - M.Java
	l	     - K.Java
	l
	l- b(package) - P.Java
				M에 있는 source에 K, P가 접근할 수 있냐? 에 대한 권한

클래스 : 표현하고자 하는 대상 → 표현 방법은 멤버변수와 메서드
	(어떤 class를 정의할 것인지 의존관계는 무엇인지 공부 했다.)
	(자바언어로 객체지향 언어를 공부 >> 클래스 개념, 의존관계, 접근제어자를 활용하여 회원관리 프로그램을 작성했다.)

	M.Java
		K k = new K();
		K.name → 가능, 서로 같은 Package에 있고, name의 접근제어자가 default이기 때문이다.
		K.setName("a") >> 가능
		K.prt() → 불가능, prt()의 접근제어자가 private



	K.Java
		String name = null;
		public void setName(String n) {
			name = n;
		}
		k() {
		}
		private void prt() {
			sysout(name);
		}
(# name은 멤버변수, n은 지역변수)
name이라는 멤버변수는 접근제어자가 default로 되어있는 것이다.
name 이라는 멤버변수를 봤을 때, K.Java의 멤버변수라는 것까지 생각한다.
K.Java는 setName이라는 메서드가 있다. 이 메서드는 String type의 n이라는 변수를
자신의 멤버변수인 name에 저장하는 메서드이고 리턴타입은 없다.


	P.Java
		K k = new K(); → 여기도 default 생략 상태
		K.name → 불가능, 서로 다른 Package에 있고, name은 접근제어자가 default이기 때문이다.
		k.setName("b")	→ 가능, setName 메서드의 접근제어자가 public이기 때문이다.
		K.prt() → 불가능, prt()의 접근제어자가 private		


* 객체지향 언어에서는 접근제어자가 있다.
* 자원은 숨기되 참조 가능하게 만들어 주는 것이 객체지향 언어의 또 다른 컨셉

객체지향언어에서 중요한 것
1. 추상화 - 클래스를 정의하는 능력(어떻게 클래스를 만들것인가?)
2. 접근제어자 * 멤버변수와 메서드에 접근 권한을 부여하는 것
	      * 종류 : default(package내), public(전체), private(class내)
	      * 사용하는 이유
		은닉화[클래스 내부 자원(멤버변수, 메서드)를 숨기기] - 기본 전제는 은닉, 필요한 애들은 공개
			- 위에서 private String name = null;
			- 그 후 setName에 name을 설정하는 메서드를 만들어주면 (public 혹은 default로)
			- 멤버변수(name)을 은닉하되, K.setName()을 이용하여 name 설정을 할 수 있다.


객체하나를 가지고 여러 변수를 공유하면
장점 : 메모리 용량 줄일 수 있다(재사용성), 기능의 통일성
단점 : 실수로 데이터를 바꾸면 다 적용되어 위험

Source(원시소스) : 사람이 작성한 소스
src → .Java
bin → .Class

실핼중이란? 
주기억상주
주기억(메모리)    
목적프로그램은 실행중인가? NO 
이유는? 목적프로그램은 원시프로그램 사람이 작성한 프로그램을 목적프로그램 기계가 이해할 수 있도록 번역한 프로그램
Stack은 하나의 쓰레드는 하나의 지역변수만 가질 수 있다.  